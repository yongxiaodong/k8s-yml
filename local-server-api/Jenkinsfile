podTemplate(
    cloud: 'kubernetes',
    containers: [
        containerTemplate(
            image: '172.26.112.47/base_lib/jnlp-slave:v9',
            livenessProbe: containerLivenessProbe(execArgs: '', failureThreshold: 0, initialDelaySeconds: 0, periodSeconds: 0, successThreshold: 0, timeoutSeconds: 0),
            name: 'jnlp',
            resourceLimitCpu: '',
            resourceLimitMemory: '',
            resourceRequestCpu: '',
            resourceRequestMemory: '',
            ttyEnabled: true,
            workingDir: '/home/jenkins/agent'
            )],
        label: 'jenkinsbuildnode',
        name: 'jenkinsbuildnode',
        namespace: 'jenkins',
        volumes: [
            hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
            persistentVolumeClaim(claimName: 'm2', mountPath: '/root/.m2', readOnly: false),
            persistentVolumeClaim(claimName: 'jenkins-workspaces', mountPath: '/home/jenkins/agent/workspace', readOnly: false)]
    )
pipeline {
    agent {
    node {
        label 'jenkinsbuildnode'
        }
    }
   environment {
   // git_url & branch_name & PROFILES_ACTIVE_VALUE & skip & replicas_count
       git_url = "${git_url}"
       docker_registry = '192.168.2.168:5000'
       docker_registry_item = 'app'
       image_name = "${JOB_NAME}"
       docker_image_fqdn = '${docker_registry}/${docker_registry_item}/${image_name}-${branch_name}:${BUILD_ID}'
       git_token_id = '09267d83-3027-4ac5-a940-e0e61757e48a'
       sub_directory = 'project'
       local_k8s_kubeconfigid = 'f8be4b66-827c-4637-bae2-7b04d9a366b0'
       pre_k8s_kubeconfigid = '1e486a1c-7a15-425e-adf2-e114d233ded5'
       prod_k8s_kubeconfigid = 'e94c584f-510a-4b20-be41-eda4a9b35770'
   }
    stages {
		stage('Pull code') {
			steps {
			dir('./project') {
				checkout([$class: 'GitSCM', branches: [[name: "${branch_name}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CheckoutOption', timeout: 20], [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${git_token_id}", url: "${git_url}"]]])
				sh "/bin/cp -fR ../${JOB_NAME}/* ./"
			}
			}
		}
		
	  stage('get_commit_msg') {
		 steps {
			script {
			   env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
			}
		}
	  }
	  stage('mvn') {
					//  when {
			//     changelog '.*$'
			//     }
				steps {
				script {
					if ( skip == 'no' ) {
					dir('./project') {
					sh '''
					mvn -B -DskipTests clean package
					'''
				}
				}
				}
			}

		}
		stage('build docker image') {
			steps {
				dir('./project') {
				sh 'sed -i "s/^.*ENV PROFILES_ACTIVE.*$/ENV PROFILES_ACTIVE ${PROFILES_ACTIVE_VALUE}/g" prd_Dockerfile'
				sh """
				docker build -t  ${docker_image_fqdn} -f prd_Dockerfile  .
				docker login -u admin -p okvoice ${docker_registry}
				docker push ${docker_image_fqdn}
				docker rmi ${docker_image_fqdn}
				"""
			}
			}
		}
		stage('deploy') {
			steps {
				dir('./project') {
				sh 'sed -i "s/replicas:.*/replicas: ${replicas_count}/g" deploy.yml'
				sh 'sed -i "s/\\(^.*image: \\)\\(.*$\\)/\\1${docker_registry}\\/${docker_registry_item}\\/${image_name}:${BUILD_ID}/g" deploy.yml'
				kubernetesDeploy configs: 'deploy.yml', kubeconfigId: '${local_k8s_kubeconfigid}'
			}
			}
		}


	}
}