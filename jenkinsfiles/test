
pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: jenkinsbuildnode
spec:
  containers:
  - name: jnlp
    image: 172.26.112.47/base_lib/jnlp-slave:v9
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: dockersock
    - mountPath: /root/.m2
      name: m2
    - mountPath: /home/jenkins/agent/workspace
      name: jenkins-workspaces
  volumes:
  - name: dockersock
    hostPath:
      path: "/var/run/docker.sock"
  - name: m2
    persistentVolumeClaim:
      claimName: m2
  - name: jenkins-workspaces
    persistentVolumeClaim:
      claimName: jenkins-workspaces
"""
    }
  }
// parameters {
//  string defaultValue: 'http://47.101.131.117:3000/renlin/quanzi.git', description: '项目的git地址', name: 'project_git_url_template', trim: false
//  string defaultValue: 'dev', description: '分支名', name: 'project_branch_name_template', trim: false
//  choice choices: ['no', 'yes'], description: '是否跳过npm阶段', name: 'skip_template'
//  string defaultValue: '1', description: '要运行的副本数量', name: 'replicas_count_template', trim: false
//  string defaultValue: 'npm run build', description: '要执行的npm打包命令', name: 'build_command_template', trim: false
// }

   environment {
   // p: project_branch_name & skip & replicas_count & build_command
   // k8s_kubeconfig_auth & harbor_auth_id
       docker_registry = '192.168.2.168:5000'
       docker_registry_item = 'app'
       image_name = "${JOB_NAME}"
       primary_domain = '.local.okyuyin.com'
       docker_image_fqdn = '${docker_registry}/${docker_registry_item}/${image_name}-${project_branch_name}:${BUILD_ID}'
       git_token_id = '09267d83-3027-4ac5-a940-e0e61757e48a'
       harbor_auth_id = '3219797e-601e-41d7-b98b-ea5abf0c7e07'
       local_k8s_kubeconfigid = 'f8be4b66-827c-4637-bae2-7b04d9a366b0'
       pre_k8s_kubeconfigid = '1e486a1c-7a15-425e-adf2-e114d233ded5'
       prod_k8s_kubeconfigid = 'e94c584f-510a-4b20-be41-eda4a9b35770'

   }
    options {
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '15', numToKeepStr: '15')
    }
    stages {
		stage('Pull code') {
			steps {
			dir('./project') {
				checkout([$class: 'GitSCM', branches: [[name: "${project_branch_name}"]], extensions: [[$class: 'CheckoutOption', timeout: 20], [$class: 'CloneOption', depth: 1]], userRemoteConfigs: [[credentialsId: "${git_token_id}", url: "${project_git_url}"]]])
				sh """
				    /bin/cp -fR ../${JOB_NAME}/* ./
				    /bin/cp -fR ../${JOB_NAME}/.dockerignore ./ || exit 0
				   """
			}
			}
		}
		
	  stage('get_commit_msg') {
		 steps {
			script {
			   env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
			}
		}
	  }
	  stage('生成URL') {
		 steps {
			script {
			   env.project_name = project_git_url.tokenize('/')[-1].tokenize('.')[0]
			   env.namespace = "${project_branch_name}" + '-' + "${env.project_name}"
			   env.fqdn_domain = "${env.namespace}" + "${primary_domain}"
			   echo "url地址:${env.fqdn_domain}"
			}
		}
	  }

	  stage('npm') {
					//  when {
			//     changelog '.*$'
			//     }
				steps {
				script {
					if ( skip == 'no' ) {
					dir('./project') {
					sh """
                        npm config set registry https://registry.npm.taobao.org
                        npm install --unsafe-perm
                        ${build_command}
					"""
				}
				}
				}
			}

		}
		stage('build docker image') {
			steps {
				dir('./project') {
				    withCredentials([usernamePassword(credentialsId: "${harbor_auth_id}", passwordVariable: 'harbor_password', usernameVariable: 'harbor_username')]) {
                        sh 'sed -i "s/^.*ENV PROFILES_ACTIVE.*$/ENV PROFILES_ACTIVE ${PROFILES_ACTIVE_VALUE}/g" prd_Dockerfile'
                        sh """
                        docker build -t  ${docker_image_fqdn} -f prd_Dockerfile  .
                        # docker login -u ${harbor_username} -p ${harbor_password} ${docker_registry}
                        # docker push ${docker_image_fqdn}
                        # docker rmi ${docker_image_fqdn}
                        """
                    }
			}
			}
		}
		stage('deploy') {
			steps {
				dir('./project') {
				echo "${env.namespace}"
				sh 'sed -i "s/replicas:.*/replicas: ${replicas_count}/g" deploy.yml'
			}
			}
		}
	}

}