
pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: jenkinsbuildnode
spec:
  containers:
  - name: jnlp
    image: 172.26.112.47/base_lib/jnlp-slave:v9
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: dockersock
    - mountPath: /root/.m2
      name: m2
    - mountPath: /home/jenkins/agent/workspace
      name: jenkins-workspaces
  volumes:
  - name: dockersock
    hostPath:
      path: "/var/run/docker.sock"
  - name: m2
    persistentVolumeClaim:
      claimName: m2
  - name: jenkins-workspaces
    persistentVolumeClaim:
      claimName: jenkins-workspaces
"""
    }
  }
// parameters {
//  string defaultValue: 'http://47.101.131.117:3000/renlin/quanzi.git', description: '项目的git地址', name: 'project_git_url_template', trim: false
//  string defaultValue: 'dev', description: '分支名', name: 'project_branch_name_template', trim: false
//  choice choices: ['no', 'yes'], description: '是否跳过npm阶段', name: 'skip_template'
//  string defaultValue: '1', description: '要运行的副本数量', name: 'replicas_count_template', trim: false
//  string defaultValue: 'npm run build', description: '要执行的npm打包命令', name: 'build_command_template', trim: false
// }

   environment {
   // 接收参数-必须: project_branch_name & skip & replicas_count & build_command
   // k8s_kubeconfig_auth & harbor_auth_id


   }
    options {
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '15', numToKeepStr: '15')
    }
    stages {
        stage('初始化'){
            steps {
                script {
                   env.target_environment = 'pre'
                   env.project_name = "${JOB_NAME}".tokenize('=')[0]
                   env.project_branch_name = "${JOB_NAME}".tokenize('=')[-1]
                   env.namespace = "${env.project_branch_name}" + '-' + "${env.project_name}"
                   env.fqdn_domain = "${env.namespace}" + "${primary_domain}"

                   env.docker_registry = '172.26.112.47'
                   env.docker_registry_item = 'app'
                   env.image_name = "${env.project_name}"
                   env.primary_domain = '.pre.okyuyin.com'
                   env.docker_image_fqdn = "${env.docker_registry}/${env.docker_registry_item}/${env.image_name}-${env.project_branch_name}:${BUILD_ID}"

                   env.git_token_id = '09267d83-3027-4ac5-a940-e0e61757e48a'
                   env.harbor_auth_id = '3219797e-601e-41d7-b98b-ea5abf0c7e07'
                   env.local_k8s_kubeconfigid = 'f8be4b66-827c-4637-bae2-7b04d9a366b0'
                   env.pre_k8s_kubeconfigid = '1e486a1c-7a15-425e-adf2-e114d233ded5'
                   env.prod_k8s_kubeconfigid = 'e94c584f-510a-4b20-be41-eda4a9b35770'

                   env.target_environment_kubeid = 'env.' + "${env.target_environment}" + '_' + '_k8s_kubeconfigid'
				}
            }
        }


		stage('拉取代码') {
			steps {
			dir('./project') {
				checkout([$class: 'GitSCM', branches: [[name: "${env.project_branch_name}"]], extensions: [[$class: 'CheckoutOption', timeout: 20], [$class: 'CloneOption', depth: 1]], userRemoteConfigs: [[credentialsId: "${git_token_id}", url: "${env.project_git_url}"]]])
				sh """
				    /bin/cp -fR ../${env.target_environment}/${env.project_name}/* ./
				    /bin/cp -fR ../${env.target_environment}/${env.project_name}/.dockerignore ./ || exit 0
				    /bin/cp -fR ../${env.target_environment}/configmap/nginx/nginx.yml ./
				   """
			}
			}
		}
		
	  stage('get_commit_msg') {
		 steps {
			script {
			   env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
			}
		}
	  }

	  stage('npm打包') {
	        steps {
				script {
					if ( skip == 'no' ) {
					dir('./project') {
					sh """
                        npm config set registry https://registry.npm.taobao.org
                        npm install --unsafe-perm
                        ${build_command}
					"""
				}
				}
				}
			}

		}
		stage('Docker镜像制作与推送') {
			steps {
				dir('./project') {
				    withCredentials([usernamePassword(credentialsId: "${harbor_auth_id}", passwordVariable: 'harbor_password', usernameVariable: 'harbor_username')]) {
                        sh """
                        docker build -t  ${env.docker_image_fqdn} -f prd_Dockerfile  .
                        docker login -u ${harbor_username} -p ${harbor_password} ${env.docker_registry}
                        docker push ${env.docker_image_fqdn}
                        docker rmi ${env.docker_image_fqdn}
                        """
                    }
			}
			}
		}
		stage('部署应用') {
			steps {
				dir('./project') {
                   sh """
                       # 备份上一次的部署文件
                       /bin/cp -f deploy.yml deploy_old.yml
                       # nginx配置文件替换创建的namespace名称和全局namespace名称,会创建namespace
                       sed -i "0,/name:.*/ s//name: ${env.namespace}/" nginx.yml
                       sed -i "s/namespace:.*/namespace: ${env.namespace}/g" nginx.yml

                       # 替换deploy部署文件中的的namespace名称
                       sed -i "0,/name:.*/ s//name: ${env.namespace}/" deploy.yml
                       # 替换deploy部署文件中的全局namespace名称
                       sed -i "s/namespace:.*/namespace: ${env.namespace}/g" deploy.yml
                       # 替换第一个ingress域名,原因:为deploy.yml预留可手动配置其他域名的灵活性
                       sed -i "0,/host:.*/ s//host: ${env.fqdn_domain}/g" deploy.yml
                       # 替换副本数
                       sed -i "s/replicas:.*/replicas: ${replicas_count}/g" deploy.yml
                       # 替换image地址
                       sed -i "s#image: .*#image: ${env.docker_image_fqdn}#g" deploy.yml


                       # 防止namespaces的名称中出现.和_,k8s不支持创建含有此类特殊字符的名称空间
                       # 替换.为-
                       sed -i '0,/name: .*/ s/\\./-/g' nginx.yml
                       sed -i '/namespace: .*/ s/\\./-/g' nginx.yml
                       sed -i '/namespace: .*/ s/\\./-/g' deploy.yml
                       # 替换_为-
                       sed -i '0,/name: .*/ s/_/-/g' nginx.yml
                       sed -i '/namespace: .*/ s/_/-/g' nginx.yml
                       sed -i '/namespace: .*/ s/_/-/g' deploy.yml
                   """}
				kubernetesDeploy configs: 'nginx.yml', kubeconfigId: "${${env.target_environment_kubeid}}"
				kubernetesDeploy configs: 'deploy.yml', kubeconfigId: "${${env.target_environment_kubeid}}"
			}
			}
		}
		stage('生成URL访问地址') {
			steps {
			    echo "访问地址:  ${env.fqdn_domain}"
			}
		}

	}

}